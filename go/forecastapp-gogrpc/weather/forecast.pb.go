// Code generated by protoc-gen-go. DO NOT EDIT.
// source: forecast.proto

package weather

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type ForecastResponse struct {
	Weather              string   `protobuf:"bytes,1,opt,name=weather,proto3" json:"weather,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ForecastResponse) Reset()         { *m = ForecastResponse{} }
func (m *ForecastResponse) String() string { return proto.CompactTextString(m) }
func (*ForecastResponse) ProtoMessage()    {}
func (*ForecastResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_f43c72c72b5e3376, []int{0}
}

func (m *ForecastResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ForecastResponse.Unmarshal(m, b)
}
func (m *ForecastResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ForecastResponse.Marshal(b, m, deterministic)
}
func (m *ForecastResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ForecastResponse.Merge(m, src)
}
func (m *ForecastResponse) XXX_Size() int {
	return xxx_messageInfo_ForecastResponse.Size(m)
}
func (m *ForecastResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ForecastResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ForecastResponse proto.InternalMessageInfo

func (m *ForecastResponse) GetWeather() string {
	if m != nil {
		return m.Weather
	}
	return ""
}

func init() {
	proto.RegisterType((*ForecastResponse)(nil), "weather.ForecastResponse")
}

func init() { proto.RegisterFile("forecast.proto", fileDescriptor_f43c72c72b5e3376) }

var fileDescriptor_f43c72c72b5e3376 = []byte{
	// 147 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x4b, 0xcb, 0x2f, 0x4a,
	0x4d, 0x4e, 0x2c, 0x2e, 0xd1, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x2f, 0x4f, 0x4d, 0x2c,
	0xc9, 0x48, 0x2d, 0x92, 0x92, 0x4e, 0xcf, 0xcf, 0x4f, 0xcf, 0x49, 0xd5, 0x07, 0x0b, 0x27, 0x95,
	0xa6, 0xe9, 0xa7, 0xe6, 0x16, 0x94, 0x54, 0x42, 0x54, 0x29, 0xe9, 0x70, 0x09, 0xb8, 0x41, 0xf5,
	0x05, 0xa5, 0x16, 0x17, 0xe4, 0xe7, 0x15, 0xa7, 0x0a, 0x49, 0x70, 0xc1, 0xf4, 0x4a, 0x30, 0x2a,
	0x30, 0x6a, 0x70, 0x06, 0xc1, 0xb8, 0x46, 0xc1, 0x5c, 0xfc, 0x30, 0xd5, 0xc1, 0xa9, 0x45, 0x65,
	0x99, 0xc9, 0xa9, 0x42, 0x0e, 0x5c, 0xdc, 0xee, 0xa9, 0x25, 0x30, 0x51, 0x21, 0x31, 0x3d, 0x88,
	0x6d, 0x7a, 0x30, 0xdb, 0xf4, 0x5c, 0x41, 0xb6, 0x49, 0x49, 0xea, 0x41, 0xcd, 0xd0, 0x43, 0xb7,
	0x2e, 0x89, 0x0d, 0xac, 0xd4, 0x18, 0x10, 0x00, 0x00, 0xff, 0xff, 0x45, 0x75, 0x75, 0xa2, 0xc1,
	0x00, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// ForecastServiceClient is the client API for ForecastService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ForecastServiceClient interface {
	GetForecast(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*ForecastResponse, error)
}

type forecastServiceClient struct {
	cc *grpc.ClientConn
}

func NewForecastServiceClient(cc *grpc.ClientConn) ForecastServiceClient {
	return &forecastServiceClient{cc}
}

func (c *forecastServiceClient) GetForecast(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*ForecastResponse, error) {
	out := new(ForecastResponse)
	err := c.cc.Invoke(ctx, "/weather.ForecastService/GetForecast", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ForecastServiceServer is the server API for ForecastService service.
type ForecastServiceServer interface {
	GetForecast(context.Context, *empty.Empty) (*ForecastResponse, error)
}

// UnimplementedForecastServiceServer can be embedded to have forward compatible implementations.
type UnimplementedForecastServiceServer struct {
}

func (*UnimplementedForecastServiceServer) GetForecast(ctx context.Context, req *empty.Empty) (*ForecastResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetForecast not implemented")
}

func RegisterForecastServiceServer(s *grpc.Server, srv ForecastServiceServer) {
	s.RegisterService(&_ForecastService_serviceDesc, srv)
}

func _ForecastService_GetForecast_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ForecastServiceServer).GetForecast(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/weather.ForecastService/GetForecast",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ForecastServiceServer).GetForecast(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

var _ForecastService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "weather.ForecastService",
	HandlerType: (*ForecastServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetForecast",
			Handler:    _ForecastService_GetForecast_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "forecast.proto",
}
